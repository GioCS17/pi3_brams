#!/bin/bash

######################## FUNCTIONS #####################################

function getDPFilenamesByStartDateAndMaxTime {
    printf "\nGenerating DP Filenames starting from ${startDate:0:8} taking $maxTime Hours ...\n"
    # geraDP.x Returns one DP file for each hour [ seq 0 $(( maxTime )) ]
    # On Dennis Script the original idea was get one DP file for each 6 hours [ seq 0 $(( maxTime/intervalHour )) ]
    for index in `seq 0 $(( maxTime/intervalHour ))`
    do
        dpFilenames[$index]=dp$(date +%Y-%m-%d-%H00 -d "${startDate:8:2}:00:00 ${startDate:0:8} $(( $intervalHour * $index )) hours")
        #dpFilenames[$index]=dp$(date +%Y-%m-%d-%H00 -d "${startDate:8:2}:00:00 ${startDate:0:8} $index hours")
    done
}

function checkIfDPFilesExistsAndAreCorrect {
    printf "\nChecking if DP Files are already created and have a right size ...\n\n"
    for dpFilename in "${dpFilenames[@]}"
    do
        if ! test -s "${dpsDirectory}/${dpFilename}"; then
            echo "DP File not founded: $dpsDirectory/$dpFilename"
            flag_dp_exists=0
        # else
        #     #TODO
        #     dpFileSize=$(ls -l ${dpsDirectory}/${dpFilename} | awk '{print $5}')
        #     if [ ${dpFileSize} -ne ${DP_FILE_DEFAULT_SIZE} ]; then
        #         echo "DP Wrong Size ${DP_FILE_DEFAULT_SIZE}<>${dpFileSize} : " "$dpsDirectory/$dpFilename"
        #         flag_dp_exists=0
        #     else
        #         echo "DP File OK: " "$dpsDirectory/$dpFilename"
        #     fi
        fi
    done
}

#Arguments
#$1 Name Folder
#$2 Forecast Hours - Hours to be downloaded (072) - 72 Hours
#$3 Formatted Date - i.e. (20190205)
function downloadGFSFiles {
    printf "\nSaving $maxTime Hours from ${startDate:0:8} on GFS Files ...\n\n"
    #Data Source
    #https://nomads.ncep.noaa.gov/pub/data/nccf/com/gfs/prod/gfs.20190708/00/
    webAddress="$gfsSourceDataAddress/gfs."
    #Write all the GFS Urls on a TXT file
    mkdir -p $dpsDirectory
    for i in `seq 0 $intervalHour $maxTime`
    do
        hourPad=`printf %03d $i`
        gfsFile="$gfsFilePattern$hourPad"
        if [ $(wgrib2 -v $dpsDirectory/$gfsFile 2>&1 | grep ERROR | wc -l) -eq 0 ];then
            echo "$gfsFile OK ..."
        else
            echo "$gfsFile Incomplete or Unexistant. Donwloading..."
            #rm -f $dpsDirectory/$gfsFile
            url=$webAddress${startDate:0:8}/00/$gfsFile
            aria2c -x16 -s16 -d $dpsDirectory -c --summary-interval=0  https://nomads.$url ftp://ftp.$url
        fi
        #Store on gfsUrls
        #index=$(($i/6))
        #gfsUrls[$index]=$webAddress${startDate:0:8}/00/$gfsFile
        #wget -nc -P $dpsDirectory $webAddress${startDate:0:8}/00/$gfsFile
        #wget -nc -P $dpsDirectory $webAddress${startDate:0:8}/00/$gfsFile.idx
    done
    # printf "%s\n" "${gfsUrls[@]}" > gfs_uris.txt
    # aria2c -d $dpsDirectory --show-console-readout=false --summary-interval=0 -i gfs_uris.txt
    # rm -f gfs_uris.txt
}

function verifyDownloadedGFSFiles {
    printf "Verifying each GFS File ...\n\n"
    for gfsFilename in $(ls -A1 $dpsDirectory | grep -e "$gfsFilePattern" )
    do
        if [ 0$(wgrib2 -match "UGRD|VGRD|TMP|HGT|RH" -match " mb:|:surface:" $dpsDirectory/$gfsFilename | wc -l ) -ge 0157 ];then
            echo "$gfsFilename OK ..."
        else
            echo "$gfsFilename Incomplete ..."
        fi
    done
}

function convertGFSFilesToBin {
    printf "\nGenerating CTL file and Mapping GFS Files ...\n\n"
    cd $dpsDirectory
    if [ ! -f "$dpsDirectory/gfs${startDate}.ctl" ]; then
        g2ctl "$gfsFilePattern%f3" > "gfs$startDate.ctl"
    else
        printf "\nCTL file already generated...\n\n"
    fi
    if [ ! -f "$dpsDirectory/${gfsFilePattern}000.idx" ]; then
        gribmap -i "gfs$startDate.ctl"
    else
        printf "\nIDX file already generated...\n\n"
    fi
    
    getInitialData

    #Don't consider Space if is not linear. This param stop the program
    if [ $linearY = 'e' -o $linearY = 'E' -o  $linearX = 'e' -o $linearX = 'E' ]; then
        printf "\n\nX or Y spacing is not linear, use a type of regrid to convert the grid to linear.Quiting..."
        exit
    fi

    #This file is generated by the geraBin.gs. We need to remove this file to prevent previous files
    if test -s ${dpsDirectory}/dims.txt; then rm -f ${dpsDirectory}/dims.txt; fi

    ctlValues="$nX $loni $intX $nY $lati $intY $nlev $nt $indef $linearY"
    echo $ctlValues
    varNames="$uComponentOfWindVarName $vComponentOfWindVarName $temperatureVarName $geopotentialHeightVarName $relativeHumidityVarName"
    iniValues="$zmax $lat2i $lat2f $lon2i $lon2f $wind_u_z_limit $wind_u_default_value $wind_v_z_limit $wind_v_default_value $temp_z_limit $temp_default_value $geo_z_limit $geo_default_value $ur_z_limit $ur_default_value"
    grads -bcpx  "run ${toolsDirectory}/geraDP/geraBIN.gs gfs$startDate.ctl $ctlValues $to_f90 ctl $varNames $iniValues"
    cd $dataFolder
}

function getInitialData {
    uComponentOfWindVarName=$(grep ") $uComponentOfWind" gfs$startDate.ctl | awk '{print $1}')
    vComponentOfWindVarName=$(grep ") $vComponentOfWind" gfs$startDate.ctl | awk '{print $1}')
    temperatureVarName=$(grep ") $temperature" gfs$startDate.ctl | awk '{print $1}')
    geopotentialHeightVarName=$(grep ") $geopotentialHeight" gfs$startDate.ctl | awk '{print $1}')
    relativeHumidityVarName=$(grep ") $relativeHumidity" gfs$startDate.ctl | grep -v -e layer | awk '{print $1}')

    printf "\nVariable names: \n\n"
    
    echo "$uComponentOfWind [m/s]: $uComponentOfWindVarName"
    echo "$vComponentOfWind [m/s]: $vComponentOfWindVarName"
    echo "$temperature [K]: $temperatureVarName"
    echo "$geopotentialHeight [gpm]: $geopotentialHeightVarName"
    echo "$relativeHumidity [%]: $relativeHumidityVarName"

    nX=`grep -i xdef gfs${startDate}.ctl | awk '{print $2}'`
    loni=`grep -i xdef gfs${startDate}.ctl | awk '{print $4}'`
    intX=`grep -i xdef gfs${startDate}.ctl | awk '{print $5}'`
    nY=`grep -i ydef gfs${startDate}.ctl | awk '{print $2}'`
    lati=`grep -i ydef gfs${startDate}.ctl | awk '{print $4}'`
    intY=`grep -i ydef gfs${startDate}.ctl | awk '{print $5}'`
    nlev=`grep -i zdef gfs${startDate}.ctl | awk '{print $2}'`
    nt=`grep -i tdef gfs${startDate}.ctl | awk '{print $2}'`
    indef=`grep -i UNDEF gfs${startDate}.ctl | awk '{print $2}'`
    linearY=`grep -i ydef gfs${startDate}.ctl | awk '{print substr($3,2,1)}'`
    linearX=`grep -i xdef gfs${startDate}.ctl | awk '{print substr($3,2,1)}'`

    cp $scriptFolder/conversion_params.ini $dpsDirectory
    #TODO Change INI Params by Parameter
    source $dpsDirectory/conversion_params.ini
    zmax=$z_max_level
    lat2i=$initial_latitude
    lat2f=$final_latitude
    lon2i=$initial_longitude
    lon2f=$final_longitude
    to_f90=$binary_grads_exists
}

function generateDPFilesFromBin {
    printf "\nGenerating the DP files...\n"
    binaryFileSize=`ls -l ${dpsDirectory}/to_dp.gra | awk '{print $5}'`
    ${toolsDirectory}/geraDP/geraDP.x ${dpsDirectory}/to_dp.gra $binaryFileSize ${dpsDirectory}/
    if [ x$to_f90 = "xS" -o x$to_f90 = "xs" ]; then
        echo "\n\nKeeping Conversion Files..."
    else
        printf "\n\nRemoving conversion Files ...\n\n"
        rm -f ${dpsDirectory}/to_dp.gra
        rm -f ${dpsDirectory}/dims.txt
        # rm -f ${dpsDirectory}/*.idx
        # rm -f ${dpsDirectory}/*.ctl
    fi
}

function getSSTFiles {
    printf "\nChecking if ${startDate:0:4} folder exists...\n"
    if [ ! -d "$sstFolder/${startDate:0:4}" ]; then
        echo "SST don't exist... Downloading new files..."
        mkdir $sstFolder/${startDate:0:4}
        # wget -nc -P $sstFolder/${startDate:0:4}  ${cptecSourceDataAddress}/week-sst/sst${startDate:0:4}.tar.gz
        #aria2c -x16 -s16 -d $sstFolder/${startDate:0:4}  ${cptecSourceDataAddress}/week-sst/sst${startDate:0:4}.tar.gz
        aria2c -x16 -s16 -d $sstFolder/${startDate:0:4}  ${cptecSourceDataAddress}/week-sst/sst2019.tar.gz
        #tar -zxvf $sstFolder/${startDate:0:4}/sst${startDate:0:4}.tar.gz -C $sstFolder/${startDate:0:4}
        tar -zxvf $sstFolder/${startDate:0:4}/sst2019.tar.gz -C $sstFolder/${startDate:0:4}
        #rm -f $sstFolder/${startDate:0:4}/sst${startDate:0:4}.tar.gz
        rm -f $sstFolder/${startDate:0:4}/sst2019.tar.gz
        printf "\nSST Files downloaded successfully...\n"
    fi

    #WHEADER File
    if [ ! -f "$sstFolder/${startDate:0:4}/WHEADER" ]; then
        echo "WHEADER File don't exist... Downloading..."
        aria2c -x16 -s16 -d $sstFolder/${startDate:0:4}  ${cptecSourceDataAddress}/week-sst/sst012.tar.gz
        tar -zxvf $sstFolder/${startDate:0:4}/sst012.tar.gz -C $sstFolder/${startDate:0:4}
        rm -f $sstFolder/${startDate:0:4}/sst012.tar.gz
        echo "WHEADER File downloaded successfully..."
    fi
}

function getSoilMostureFiles {
    printf "\nChecking if Soil Mosture files exists...\n"
    if [ ! -f "$soilMostureFolder/GL_SM.GPNR.${startDate:0:8}00.vfm" ]; then
        echo "Soil Mosture files don't exist... Downloading new files..."
        for i in `seq 0 12 12`
        do
            hourSMF=`printf %02d $i`
            aria2c -x16 -s16 -c -d $soilMostureFolder  ${cptecSourceDataAddress}/soil-moisture/${startDate:0:4}/GPNR/GL_SM.GPNR.${startDate:0:8}$hourSMF.vfm.gz
            # wget -nc -P $soilMostureFolder  ${cptecSourceDataAddress}/soil-moisture/${startDate:0:4}/GPNR/GL_SM.GPNR.${startDate:0:8}12.vfm.gz
            gzip -dc < $soilMostureFolder/GL_SM.GPNR.${startDate:0:8}$hourSMF.vfm.gz > $soilMostureFolder/GL_SM.GPNR.${startDate:0:8}$hourSMF.vfm
            rm -f $soilMostureFolder/GL_SM.GPNR.${startDate:0:8}$hourSMF.vfm.gz
        done
        printf "\nSoil Mosture files Files downloaded successfully...\n"
    fi
}

function getTopographyData {
    printf "\nChecking if Topography files exists...\n"
    if [ ! -f "$topographyFolder/ELHEADER" ]; then
        echo "Topography files don't exist... Downloading HEADER..."
        aria2c -x16 -s16 -c -d $topographyFolder  ${cptecSourceDataAddress}/topo/topo1km.tar.gz
        # wget -nc -P $topographyFolder  ${cptecSourceDataAddress}/topo/topo1km.tar.gz
        tar -zxvf $topographyFolder/topo1km.tar.gz -C $topographyFolder
        mv $topographyFolder/topo1km/* $topographyFolder
        rm -f $topographyFolder/topo1km.tar.gz
        rm -r $topographyFolder/topo1km
        printf "\nTopography files downloaded successfully...\n"
    fi
}

function getMODISNDVI {
    printf "\nChecking if MODIS NDVI header exist...\n"
    if [ ! -f "$ndviMODISFolder/NHEADER" ]; then
        echo "MODIS NDVI HEADER don't exist... Downloading HEADER..."
        aria2c -x16 -s16 -c -d $ndviMODISFolder  ${cptecSourceDataAddress}/ndvi-modis/NHEADER.tar.gz
        # wget -nc -P $ndviMODISFolder  ${cptecSourceDataAddress}/ndvi-modis/NHEADER.tar.gz
        tar -zxvf $ndviMODISFolder/NHEADER.tar.gz -C $ndviMODISFolder
        rm -f $ndviMODISFolder/NHEADER.tar.gz
        printf "\nMODIS NDVI HEADER files downloaded successfully...\n"
    fi
    
    months=(jan feb mar apr may jun jul aug sep oct nov dec)
    # month=`LANG=en_us_88591; date +%b -d ${startDate:0:8} | awk '{print tolower($0)}'`
    for month in "${months[@]}";
    do
        if [ ! -d "$ndviMODISFolder/$month" ]; then
            echo "$month folder don't exist... Downloading..."
            aria2c -x16 -s16 -c -d $ndviMODISFolder  ${cptecSourceDataAddress}/ndvi-modis/${month}.tar.gz
            # wget -nc -P $ndviMODISFolder  ${cptecSourceDataAddress}/ndvi-modis/${month}.tar.gz
            tar -zxvf $ndviMODISFolder/${month}.tar.gz -C $ndviMODISFolder 
            rm -f $ndviMODISFolder/${month}.tar.gz
            printf "\n${month} folder downloaded successfully...\n"
        fi
    done
}

function getGLFAOINPE {
    printf "\nChecking if GLFAO files exist...\n"

    if [ ! -f "$surfaceFolder/GL_FAO_INPE" ]; then
        mkdir $glfaoFolder
        mkdir $glfaoFolder/tmp
        echo "GLFAO files don't exist... Downloading GLFAO Files..."
        wget -nc -P $glfaoFolder/tmp ${cptecSourceDataAddress}/soil-fao/GL_FAO_INPE.tar.gz
        tar -zxvf $glfaoFolder/tmp/GL_FAO_INPE.tar.gz -C $glfaoFolder/tmp
        mv $glfaoFolder/tmp/soil-fao/* $glfaoFolder
        rm -rf $glfaoFolder/tmp
    fi
}

function getGLOGEINPE {
    printf "\nChecking if GLOGE files exist...\n"

    if [ ! -f "$surfaceFolder/GL_OGE_INPE" ]; then
        echo "GLOGE files don't exist... Downloading GLOGE Files..."
        wget -nc -P $surfaceFolder ${cptecSourceDataAddress}/prep-chem/surface_data/GL_OGE_INPE.tar.gz
        tar -zxvf $surfaceFolder/GL_OGE_INPE.tar.gz -C $surfaceFolder
        rm -f $surfaceFolder/GL_OGE_INPE.tar.gz
    fi
}


######################## MAIN #####################################

###### ARGS #######
startDate=$1 #Date & Time to be converted ->Format: “YYYYMMDDHH” ie:2019031000
maxTime=$2  #Number of hours to predict ie: 72
resolution=$3  #Resolution: 0p25 0p50 1p00
[[ -z $3 ]] && resolution='0p25'

#################### CONSTANTS ############################

############ FOLDERS #############
dataFolder="/data"
toolsDirectory="/tools" #Tools Directory Folder
scriptFolder="/scripts" #Tools Directory Folder
sstFolder=${dataFolder}/datain/SST #SST Folder
dpsDirectory=${dataFolder}/datain/dp-files/${startDate} #DPS destiny folder
soilMostureFolder=${dataFolder}/datain/UMIDADE/${startDate} #Soil Mosture Folder
ndviMODISFolder=${dataFolder}/shared_datain/SURFACE_DATA/NDVI-MODIS_vfm #NDVI Folder
surfaceFolder=${dataFolder}/shared_datain/SURFACE_DATA/ #GLFAO Folder
glfaoFolder=${dataFolder}/shared_datain/SURFACE_DATA/GL_FAO_INPE #GLFAO Folder
glogeFolder=${dataFolder}/shared_datain/SURFACE_DATA/GL_OGE_INPE #GLOGE Folder
topographyFolder=${dataFolder}/shared_datain/SURFACE_DATA/topo1km #NDVI Folder


############ VALUES #############
intervalHour=6 #We consider 6 hours by interval
gfsFilePattern="gfs.t00z.pgrb2.${resolution}.f" #This is the actual file pattern
gfsSourceDataAddress="ncep.noaa.gov/pub/data/nccf/com/gfs/prod" #We load the files here
# ftpGfsSourceDataAddress="ftp://ftp.ncep.noaa.gov/pub/data/nccf/com/gfs/prod/gfs."
# httpGfsSourceDataAddress="https://www.ftp.ncep.noaa.gov/data/nccf/com/gfs/prod"
cptecSourceDataAddress="ftp://ftp1.cptec.inpe.br/brams/data-brams"
DP_FILE_DEFAULT_SIZE=177402422 #IMPORTANT: This is the standard size of DP File [ Dennis File Size: 199577651 ]

############ VARNAMES #############
uComponentOfWind="U-Component of Wind "
vComponentOfWind="V-Component of Wind "
temperature="Temperature "
geopotentialHeight="Geopotential Height "
relativeHumidity="Relative Humidity "

# Step 1: Initial Variables and Arguments
dpFilenames=() #Array to store the dp filenames
getDPFilenamesByStartDateAndMaxTime

# Step 2: Verify if the DP's are already downloaded and if they are, verify that the size of each one 
# be the correct (all dp should have the same size)

# TODO: Confirm and Remove the file size analysis, because with file existance is enough and analyze the file size 
# could make problems with future files

flag_dp_exists=1 #We consider the DP Files exists
checkIfDPFilesExistsAndAreCorrect 

# Step 3: Download the GFS files to convert them to DP (If the DP's don’t exist)
# gfsUrls=() #Array to store the urls
if [ $flag_dp_exists -eq 0 ]; then
    downloadGFSFiles
    convertGFSFilesToBin
    generateDPFilesFromBin
else
    printf "\nDP's already generated...\n"
fi
#Check or Download Existant SST Files
getSSTFiles

#Check or Download Existant Soil Mosture Files
getSoilMostureFiles

#Check or Download MODIS NDVI Files
getMODISNDVI

#Check or Download Topography Files
getTopographyData

#Check or Download GLFAO Files
getGLFAOINPE

#Check or Download GLOGE Files
getGLOGEINPE


